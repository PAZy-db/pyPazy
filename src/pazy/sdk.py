"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .datasets import Datasets
from .literature import Literature
from .organisms import Organisms
from .proteins import Proteins
from .sdkconfiguration import SDKConfiguration
from .substrates import Substrates
from .utils.retries import RetryConfig
from pazy import utils
from pazy._hooks import SDKHooks
from pazy.models import components
from typing import Callable, Dict, Optional, Union

class Pazy:
    r"""PaZY API: Backend used for the PaZY database to manage and view entries."""
    datasets: Datasets
    literature: Literature
    organisms: Organisms
    proteins: Proteins
    substrates: Substrates

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 security: Union[components.Security,Callable[[], components.Security]] = None,
                 server_idx: Optional[int] = None,
                 server_url: Optional[str] = None,
                 url_params: Optional[Dict[str, str]] = None,
                 client: Optional[requests_http.Session] = None,
                 retry_config: Optional[RetryConfig] = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.

        :param security: The security details required for authentication
        :type security: Union[components.Security,Callable[[], components.Security]]
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: Dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session
        :param retry_config: The utils.RetryConfig to use globally
        :type retry_config: RetryConfig
        """
        if client is None:
            client = requests_http.Session()

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)
    

        self.sdk_configuration = SDKConfiguration(
            client,
            security,
            server_url,
            server_idx,
            retry_config=retry_config
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(current_server_url, self.sdk_configuration.client)
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__['_hooks'] = hooks

        self._init_sdks()


    def _init_sdks(self):
        self.datasets = Datasets(self.sdk_configuration)
        self.literature = Literature(self.sdk_configuration)
        self.organisms = Organisms(self.sdk_configuration)
        self.proteins = Proteins(self.sdk_configuration)
        self.substrates = Substrates(self.sdk_configuration)
